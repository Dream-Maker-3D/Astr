@startuml Voice Assistant System Architecture

!define RECTANGLE class

package "Voice Assistant System" {
    
    RECTANGLE VoiceAssistantFacade {
        +start_conversation()
        +stop_conversation()
        +handle_voice_input()
        -audio_capture: AudioCaptureService
        -speech_recognition: SpeechRecognitionService
        -ai_service: AIConversationService
        -speech_synthesis: SpeechSynthesisService
        -audio_player: AudioPlayerService
    }
    
    RECTANGLE AudioCaptureService {
        +start_recording()
        +stop_recording()
        +get_audio_stream()
        -microphone_config: MicrophoneConfig
        -audio_buffer: AudioBuffer
    }
    
    RECTANGLE SpeechRecognitionService {
        +transcribe_audio(audio_data)
        +initialize_model()
        -coqui_stt_model: CoquiSTTModel
        -preprocessing_pipeline: AudioPreprocessor
    }
    
    RECTANGLE AIConversationService {
        +send_message(text)
        +get_response()
        -openrouter_client: OpenRouterAPIClient
        -conversation_context: ConversationContext
    }
    
    RECTANGLE SpeechSynthesisService {
        +synthesize_text(text)
        +initialize_voice_model()
        -coqui_tts_model: CoquiTTSModel
        -voice_settings: VoiceConfiguration
    }
    
    RECTANGLE AudioPlayerService {
        +play_audio(audio_data)
        +stop_playback()
        -audio_output_device: AudioDevice
    }
    
    RECTANGLE EventBusService {
        +publish(event_type, data)
        +subscribe(event_type, handler)
        +unsubscribe(event_type, handler)
        -event_handlers: Dict
    }
    
    RECTANGLE ConfigurationManager {
        +load_config()
        +get_audio_config()
        +get_ai_config()
        +get_voice_config()
    }
    
    RECTANGLE AudioPreprocessor {
        +apply_noise_reduction(audio)
        +normalize_volume(audio)
        +apply_filters(audio)
    }
    
    RECTANGLE ConversationContext {
        +add_message(message)
        +get_context()
        +clear_context()
        -message_history: List
    }
}

package "External Services" {
    RECTANGLE CoquiSTTModel
    RECTANGLE CoquiTTSModel
    RECTANGLE OpenRouterAPIClient
}

package "System Components" {
    RECTANGLE MicrophoneConfig
    RECTANGLE AudioDevice
    RECTANGLE AudioBuffer
    RECTANGLE VoiceConfiguration
}

' Relationships - Facade Pattern
VoiceAssistantFacade --> AudioCaptureService
VoiceAssistantFacade --> SpeechRecognitionService
VoiceAssistantFacade --> AIConversationService
VoiceAssistantFacade --> SpeechSynthesisService
VoiceAssistantFacade --> AudioPlayerService
VoiceAssistantFacade --> EventBusService

' Service Dependencies
SpeechRecognitionService --> CoquiSTTModel
SpeechRecognitionService --> AudioPreprocessor
AIConversationService --> OpenRouterAPIClient
AIConversationService --> ConversationContext
SpeechSynthesisService --> CoquiTTSModel
SpeechSynthesisService --> VoiceConfiguration

' Configuration Dependencies
AudioCaptureService --> ConfigurationManager
SpeechRecognitionService --> ConfigurationManager
AIConversationService --> ConfigurationManager
SpeechSynthesisService --> ConfigurationManager

' System Components
AudioCaptureService --> MicrophoneConfig
AudioCaptureService --> AudioBuffer
AudioPlayerService --> AudioDevice

' Observer Pattern for Events
EventBusService --> VoiceAssistantFacade : notifies
EventBusService --> AudioCaptureService : notifies
EventBusService --> SpeechRecognitionService : notifies

note right of VoiceAssistantFacade
    Facade Pattern: 
    Simplifies complex subsystem
    interactions for client
end note

note right of EventBusService
    Observer Pattern:
    Decouples components through
    event-driven communication
end note

note right of ConfigurationManager
    Singleton Pattern:
    Single source of configuration
    throughout the system
end note

@enduml